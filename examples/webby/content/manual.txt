--- 
title:      Manual
created_at: Wed Aug 29 08:57:00 -0600 2007
filter:
  - graphviz
  - textile
--- 
<div class="toc push-1">

h4(#toc). Table of Contents

# "Getting Started":#gettingstarted
## "Installation":#installation
## "New Webiste":#newwebsite
# "Working With Resources":#workingwithresources
## "Pages":#pages
### "Page Attributes":#pageattributes
### "Page Filters":#pagefilters
## "Layouts":#layouts
# "Filters":#filters
# "Default Settings":#defaultsettings

</div>

h2(#gettingstarted){clear:none}. Getting Started

h3(#requirements){clear:none}. Requirements

Webby is an application written using the Ruby programming language. To install and run Webby you will need the following applications on your system:

* "Ruby":http://ruby-lang.org
* "RubyGems":http://rubygems.org/read/chapter/3

h3(#installation){clear:none}. Installation

Webby is an application written using the Ruby programming language. You will need to install a Ruby interpreter on your computer. Download and installation instructions can be found on the "Ruby":http://ruby-lang.org website. For the Windows platform, the one-click installer is recommended. Webby is not compatible with the Ruby 1.9.0 release; please use the Ruby 1.8.6 release.

You will also need to install RubyGems. If you used the Windows one-click installer, RubyGems is already present on your system. For everyone else you can find installation instructions on the "RubyGems":http://rubygems.org/read/chapter/3 website.

To install Webby and its dependent gems type the following command. Omit the @sudo@ portion for the Windows platform; you will need to specify the *mswin32* versions of the _mongrel_ and _hpricot_ dependent gems when prompted.

<pre>
sudo gem install -y webby
</pre>

To make use of all the features Webby has to offer, the following gems should also be installed. These gems provide different ways to transform text into HTML or CSS.

<pre>
sudo gem install -y RedcCoth
sudo gem install -y BlueCloth
sudo gem install -y haml
sudo gem install -y coderay
</pre>

h3(#newwebsite). New Website

h2(#workingwithresources). Working With Resources

A resource is any file that is found in the _content_ or _layouts_ folders. Resources are either copied to the output folder or they are processed through the Webby filter engine to generate an output file. Resources fall into one of three types:

* Files
* Pages
* Layouts

Files are the simplest resource to handle. They are copied, unchanged, from the content folder to the output folder. Files include resources such as images, CSS stylesheets, and so forth. A file will be copied from its location in the content folder to its corresponding location in the output folder -- i.e. a file located at @content/some/folder/image.jpg@ would be copied to @output/some/folder/image.jpg@.

Files will only be found in the _content_ folder. The _layouts_ folder is reserved solely for layouts.

h3(#pages). Pages

Pages are found in the _content_ folder along with regular files. Pages contain *meta-data* at the top of the file; this is what differentiates a page from a regular file. The meta-data is a section of "YAML":http://www.yaml.org/spec/1.1/ formatted text that describes various properties and attributes of the page. These attributes are used by Webby to determine how the page will be processed by the filter engine.

Let's look at an example page.

<pre>
---
title:      Lorem Ipsum
created_at: Wed Aug 29 08:57:00 -0600 2007
filter:
  - erb
  - textile
---
h2. <%= @page.title %>

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nunc congue ipsum
vestibulum libero. Aenean vitae justo. Nam eget tellus. Etiam convallis, est eu
lobortis mattis, lectus tellus tempus felis, a ultricies erat ipsum at metus.
</pre>

The page meta-data is contained in the first section  --  it is located between the two @---@ lines. The page meta-data will not be present in the generated HTML file. Only the page content (the text below the second @---@ line) will be rendered into the final HTML file. The meta-data defines a collection of attributes that (1) are made available to the various Webby filters and (2) provide instructions to the Webby filter engine itself.

Three attributes are defined in the above example: @title@, @created_at@, and @filter@. The first attribute, @title@, is associated with the value "Lorem Ipsum". This attribute is used in the first line of the page content to render the title using a combination of the ERB and Textile filters (more can be read in the "Filters":#filters section of this manual). The example page above will result in the following snippet of HTML code.

<pre>
<h2>Lorem Ipsum</h2>

<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nunc congue ipsum
vestibulum libero. Aenean vitae justo. Nam eget tellus. Etiam convallis, est eu
lobortis mattis, lectus tellus tempus felis, a ultricies erat ipsum at metus.</p>
</pre>

You can see that the value of the @title@ attribute was substituted for the ERB snippet <code><%= @page.title %></code>. All page attributes can be accessed using the <code>@page.attribute</code> syntax within an ERB block. This will be discussed in greater detail in the "ERB Filter":#erbfilter section.

The last attribute in the meta-data section is the @filter@ attribute. The value for this attribute is a list of filters that will be applied to the page contents. The filters will be applied in the order they are specified. For the example page this would be the ERB filter followed by the Textile filter.

h4(#pageattributes). Page Attributes

Attribute identifiers cannot contain spaces; they must be separated from their values by a colon. Other than that, you are free to define as many attributes as you like. Aside from defining values that can be rendered into a page, attributes are also used to find other pages in the site. Finding and linking to other pages is discussed in the "ERB Filter":#erbfilter section.

There are a few attributes that control when, where, and how pages are rendered. These are listed below with a brief description of how the attribute affects the system.

* *destination*  --  Defines the path in the output directory where the rendered page should be stored.
* *dirty*  --  The dirty flag is used to determine whether the page should rendered or not. Normally this is automatically determined by the filter engine, but it can be overridden by setting this attribute. If the dirty flag is set to _true_ then the page will always be rendered. If the dirty flag is set to _false_ then the page will never be rendered.
* *extension*  --  Defines the extension that will be appended to the filename of the rendered page in the output folder. The extension is determined by looking at the following:
** the meta-data of the current page for an @extension@ attribute
** the meta-data of layout file of the current page for an @extension@ attribute
** the extension of this page file in the _content_ folder
* *filter*  --  Defines the list of filters that will be applied to the contents of this page. If left blank, then the default filter will be applied to the page contents.
* *layout*  --  Defines the layout that the page contents will be rendered into. The default layout will be used if this attribute is not defined. The value of @nil@ should be specified if the page should not be rendered into any layout.

The following attributes are defined for each page in the content folder. These attributes cannot be changed in the page's meta-data section. However, they are available to the ERB filter when rendering the contents of a page.

* *path*  --  The full path to the file in the _content_ folder
* *dir*  --  The relative directory in the output folder where the page will be rendered
* *filename*  --  The name of the file in the _content_ folder excluding any path information
* *ext*  --  The extension of the file in the _content_ folder
* *mtime*  --  The modification time of the file in the _content_ folder
* *number*  --  Reserved variable used for multi-page content
* *url*  --  A URL suitable for creating a link to the page
* *render*  --  Returns the contents of the page as rendered by the Webby filter engine

h4(#pagefilters). Page Filters

Filters operate on the content of a page by transforming the text of the content section according to the rules of the individual filter. Some filters transform simplified markup into true HTML syntax; examples of these are the Textile filter and the Markdown filter. Other filters create images from text in the page (Graphviz filter) or apply syntax highlighting to the text (CodeRay filter). All the filters are discussed in detail in the "Filters":#filters section of this document.

h3(#layouts). Layouts

Layouts provide the basic framework for a page  --  the header, the footer, the navigation. They provide a consistent look and feel across all pages in the website. Individual pages contain just the content for that particular page.

<graphviz path="images" class="push-0" alt="layout diagram">
digraph layout_graph {
  rankdir = LR;
  edge [fontname="Verdana", fontsize=8];
  node [fontname="Verdana", fontsize=10];

  page -> layout [label="rendered\ninto"];
  layout -> HTML [label="results\nin"];
}
</graphviz>

The diagram to the right shows a typical page rendering process. The content of a page is rendered by the Webby filter engine. The rendered content is inserted into the layout specified by the page; the content insertion occurs as the layout is being rendered. The result is the HTML that is stored in the _output_ folder.

Layouts are treated exactly as pages are treated with one exception  --  the layout has access to the rendered contents of another page in site. The content of the page being rendered is made available to the layout via the @@content@ variable accessible from the ERB filter.

<pre>
---
extension: html
filter:    erb
---
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en-us">
<head>
  <title><%= @page.title %></title>
</head>
<body>
  <%= @content %>
</body>
</html>
</pre>

The example above shows a very simple layout. The content for the current page being rendered will be inserted between the HTML body tags.

Along with the @@content@ variable, all the attributes of the current page being rendered are also accessible in the layout. The page title is inserted into the HTML title tags. But again, any page attribute can be accessed within the layout via the @@page@ variable.

h2(#filters). Filters

* ERB
* Textile
* Markdown
* HAML
* SASS
* CodeRay
* Graphviz
* BasePath
* Tidy


h2(#defaultsettings). Default Settings

